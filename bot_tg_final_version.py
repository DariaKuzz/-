import requests
import pandas as pd
import sqlite3
from sqlite3 import Error
from datetime import datetime, timedelta
import time

import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
import logging
# -------------------------------------------------------------

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from config import API_TOKEN, BOT_TOKEN, DB_FILE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# -------------------------------------------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from base import save_to_db, create_db_connection
from analytics import get_flight_prices_from_db, train_and_predict, visualize_price_trends, statistical_analysis

# -------------------------------------------------------------
def create_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('üõ´ Start'))
    keyboard.add(KeyboardButton('üåê Forecast'))
    keyboard.add(KeyboardButton('‚ùì Help'))
    keyboard.add(KeyboardButton('ü™ß Codes'))
    return keyboard


@bot.message_handler(func=lambda message: message.text in ['üõ´ Start', '‚ùì Help', 'ü™ß Codes', 'üåê Forecast'])
def handle_commands(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
    if message.text == 'üõ´ Start':
        text = """
    ‚úàÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã!
    
üîç –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
- –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç üìä
- –°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã üóìÔ∏è
- –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω üìâ
    
üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'üåê Forecast' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.
    """
    elif message.text == '‚ùì Help':
        text = """
    –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
    
    1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 'üåê Forecast'
    2. –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
       –ì–û–†–û–î_–û–¢–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–û–†–û–î_–ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê–ß–ê–õ–¨–ù–ê–Ø_–î–ê–¢–ê –ö–û–ù–ï–ß–ù–ê–Ø_–î–ê–¢–ê
    #    –ù–∞–ø—Ä–∏–º–µ—Ä: LED MOW 2024-07-01 2024-07-30
    
    3. –ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∂–µ—Ç:
       - –ò—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
       - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π
       - –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
    
    –ö–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IATA (LED, MOW, KZN –∏ —Ç.–¥.)
    """
    elif message.text == 'ü™ß Codes':
        text = """
    –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤:
    üåè LED - –∞—ç—Ä–æ–ø–æ—Ä—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞;
    üåè MOW - –∞—ç—Ä–æ–ø–æ—Ä—Ç –ú–æ—Å–∫–≤—ã;
    üåè KZN - –∞—ç—Ä–æ–ø–æ—Ä—Ç –ö–∞–∑–∞–Ω–∏;
    üåè KJA ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∞ (–ï–º–µ–ª—å—è–Ω–æ–≤–æ);
    üåè IKT ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –ò—Ä–∫—É—Ç—Å–∫–∞;
    üåè KGD ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥–∞ (–•—Ä–∞–±—Ä–æ–≤–æ);
    üåè KHV ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –•–∞–±–∞—Ä–æ–≤—Å–∫–∞ (–ù–æ–≤—ã–π);
    üåè TJM ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –¢—é–º–µ–Ω–∏ (–†–æ—â–∏–Ω–æ);
    üåè PEE ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –ü–µ—Ä–º–∏ (–ë–æ–ª—å—à–æ–µ –°–∞–≤–∏–Ω–æ);
    üåè TOF ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –¢–æ–º—Å–∫–∞ (–ë–æ–≥–∞—à–µ–≤–æ);
    üåè ASF ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –ê—Å—Ç—Ä–∞—Ö–∞–Ω–∏ (–ù–∞—Ä–∏–º–∞–Ω–æ–≤–æ);
    üåè GSV ‚Äî –∞—ç—Ä–æ–ø–æ—Ä—Ç –°–∞—Ä–∞—Ç–æ–≤–∞ (–ì–∞–≥–∞—Ä–∏–Ω)
    """
    elif message.text == 'üåê Forecast':
        text = """–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 
    –ì–û–†–û–î_–û–¢–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–û–†–û–î_–ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê–ß–ê–õ–¨–ù–ê–Ø_–î–ê–¢–ê –ö–û–ù–ï–ß–ù–ê–Ø_–î–ê–¢–ê
    –ù–∞–ø—Ä–∏–º–µ—Ä: LED MOW 2024-07-01 2024-07-30"""

    bot.send_message(message.chat.id, text, reply_markup=create_keyboard())
    return

@bot.message_handler(func=lambda message: True)
def handle_route(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        parts = message.text.split()
        if len(parts) != 4:
            bot.send_message(
                message.chat.id,
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: LED MOW 2024-07-01 2024-07-30",
                reply_markup=create_keyboard()
            )
            return
        
        origin, destination, start_date, end_date = parts
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
        try:
            datetime.strptime(start_date, "%Y-%m-%d")
            datetime.strptime(end_date, "%Y-%m-%d")
        except ValueError:
            bot.send_message(
                message.chat.id,
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD",
                reply_markup=create_keyboard()
            )
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.send_message(
            message.chat.id,
            "–ò—â—É –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...",
            reply_markup=create_keyboard()
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        df = get_flight_prices_from_db(origin, destination, start_date, end_date)
        if df.empty:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            bot.send_message(
                message.chat.id,
                "–î–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –Ω–µ—Ç. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API...")
            
            if save_to_db(origin, destination, start_date):
                df = get_flight_prices_from_db(origin, destination, start_date, end_date)
            
        if df.empty:
            bot.send_message(
                message.chat.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞",
                reply_markup=create_keyboard()
            )
            return
        

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            # 1. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        trend_buffer = statistical_analysis(df)
        if trend_buffer:
            bot.send_photo(message.chat.id, trend_buffer, caption="–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
            trend_buffer.close()
        
        # 2. –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
        price_buffer = visualize_price_trends(df, origin, destination)
        if price_buffer:
            bot.send_photo(message.chat.id, price_buffer, caption="–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω")
            price_buffer.close()
        
        # 3. –ü—Ä–æ–≥–Ω–æ–∑
        predict_buffer, forecast = train_and_predict(df, origin, destination)
        if predict_buffer and forecast:
            bot.send_photo(message.chat.id, predict_buffer, caption="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π")
            predict_buffer.close()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            forecast_text = "\n".join(
                f"{datetime.strptime(item['date'], '%Y-%m-%d').strftime('%d.%m')}: {item['price']:.0f} —Ä—É–±"
                for item in forecast)
            bot.send_message(message.chat.id, f"–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω:\n{forecast_text}")

        # forecast_df = generate_price_forecast(df)
        
        # # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        # response_text = f"""
        # –î–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É: {origin} ‚Üí {destination}
        # –ü–µ—Ä–∏–æ–¥: {start_date} ‚Äî {end_date}
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {int(df['min_price'].min())} —Ä—É–±
        # –°—Ä–µ–¥–Ω—è—è: {int(df['min_price'].mean())} —Ä—É–±
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {int(df['min_price'].max())} —Ä—É–±
        # """
        
        # if forecast_df is not None:
        #     best_price_date = forecast_df.loc[forecast_df['predicted_price'].idxmin()]
        #     response_text += f"""
            
        #     –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π:
        #     –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è {best_price_date['date'].strftime('%Y-%m-%d')}
        #     –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {int(best_price_date['predicted_price'])} —Ä—É–±
        #     """
        
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        # bot.send_message(
        #     message.chat.id,
        #     response_text,
        #     reply_markup=create_keyboard()
        # )
        
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        # plot_buf = create_plot(df, forecast_df, origin, destination)
        # bot.send_photo(
        #     message.chat.id,
        #     plot_buf,
        #     caption="–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω",
        #     reply_markup=create_keyboard()
        # )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=create_keyboard()
        )
    return

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True, interval=0)